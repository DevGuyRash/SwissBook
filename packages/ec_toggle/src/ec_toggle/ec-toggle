#!/usr/bin/env bash
# ──────────────────────────────────────────────────────────────────────────────
#  ec-toggle - Advanced echo / noise-cancellation manager for Linux audio
#
#  Version : 4.2   (2025-06-23; master-device binding + misc polish)
#  License : MIT   (SPDX-License-Identifier: MIT)
#  Project : https://github.com/YourRepo/ec-toggle
# ──────────────────────────────────────────────────────────────────────────────
#  Works with PipeWire ≥ 0.3.32 (+ WirePlumber) or PulseAudio ≥ 13
#  Display-protocol agnostic (Wayland / X11 / head-less)
# ──────────────────────────────────────────────────────────────────────────────
export LC_ALL=C.UTF-8
set -euo pipefail

###############################################################################
# CONSTANTS & DEFAULTS
###############################################################################
readonly VERSION="4.2"
readonly CONFIG_VERSION="2"
readonly XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
readonly XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
readonly USER_CONF_DIR="${XDG_CONFIG_HOME}/ec-toggle"
readonly PW_CONF_DIR="${XDG_CONFIG_HOME}/pipewire/pipewire.conf.d"
readonly PW_CONF_FILE="${PW_CONF_DIR}/99-echo-cancel.conf"
readonly PA_IDX_FILE="${XDG_RUNTIME_DIR}/ec-toggle-pa.idx"
readonly LOCK_FILE="${XDG_RUNTIME_DIR}/ec-toggle.lock"
readonly DEFAULT_AEC_LIB="aec/libspa-aec-webrtc"
readonly DEFAULT_LATENCY="256/48000"
readonly DEFAULT_PRESET="default"       # default|gaming|studio|rnnoise
LOG_LEVEL="${ECTOGGLE_LOG:-info}"
NO_COLOR="${NO_COLOR:-}"

# Minimal backend helpers must be available to unit tests *before* the guard.
is_pipewire()   { command -v wpctl >/dev/null 2>&1 || command -v pw-cli  >/dev/null 2>&1; }
is_pulseaudio() { command -v pactl >/dev/null 2>&1; }

###############################################################################
# LOGGING & UTILITIES
###############################################################################
log() {
  local level="$1"; shift
  local color reset
  [[ -n "$NO_COLOR" ]] && color="" reset="" || {
    case "$level" in
      debug) color=$'\e[2m';;
      info)  color=$'\e[1;32m';;
      warn)  color=$'\e[1;33m';;
      error) color=$'\e[1;31m';;
    esac
    reset=$'\e[0m'
  }
  [[ "$level" = debug && "$LOG_LEVEL" != debug ]] && return
  printf "%s%s%s\n" "$color" "$*" "$reset"
}
die() { log error "$*"; exit 1; }
need() { command -v "$1" >/dev/null 2>&1 || die "Missing dependency: $1"; }

###############################################################################
# HELP & ARGUMENTS
###############################################################################
show_version() { printf 'ec-toggle %s\n' "$VERSION"; exit 0; }
usage() {
  cat <<EOF
Usage: ec-toggle <command> [options]

Commands:
  enable|on        Enable echo / noise cancellation
  disable|off      Disable and remove virtual devices
  status           Show whether cancellation is active
  list             List current audio nodes
  watch            Background poller that re-enables on hot-plug
  --generate-systemd-unit   Emit a systemd user service for "watch"
  --version        Show version

Options:
  -s, --sink NAME       Use NAME as *sink_master* (playback)
  -m, --source NAME     Use NAME as *source_master* (microphone)
  -l, --latency N/D     Node latency (PipeWire only, default: ${DEFAULT_LATENCY})
  -p, --preset NAME     Preset (PipeWire only, see below for values)
  -d, --dry-run         Print actions without applying them
  -j, --json            JSON status output
      --force           Ignore already-enabled / disabled errors
      --help            Show this help

Details
=======
Sources & Sinks
  * *source_master* - the **raw microphone** you want cleaned.
  * *sink_master*   - the **speaker / monitor** whose signal is subtracted.
  Omit both flags to let ec-toggle use your current defaults automatically.

What gets created
  • The script creates a virtual source: `EchoCancelled Mic` (PipeWire) or
     `ec_source` (PulseAudio). Use this virtual source in your apps.
  • PipeWire also creates `EchoCancelled Sink` and `EchoCancelled Playback` nodes.
  • PulseAudio creates a corresponding `ec_sink`.

PipeWire Presets & Latency
  The --preset and --latency flags only apply when using PipeWire. PulseAudio
  uses a default, non-configurable WebRTC echo canceller.

  • Latency format: **frames/sample-rate**, e.g. `256/48000` ≈ 5.3 ms.
  • Presets:
        default  - WebRTC echo + noise (balanced)
        gaming   - low-CPU, lighter suppression
        studio   - stronger gate, lower floor
        rnnoise  - ML-based noise-only, little echo subtraction

    ┌───────────────────────────────────────────────────────────────────────────────┐
    │               Quick preset comparison (★ ≈ 25 % of one CPU core)              │
    ├─────────┬─────┬──────────────┬────────────────┬───────────────────────────────┤
    │  Name   │ CPU │ Echo-cancel  │ Noise-suppress │           Use-case            │
    ├─────────┼─────┼──────────────┼────────────────┼───────────────────────────────┤
    │ default │ **  │    good      │     good       │ calls & meetings *(balanced)* │
    │ gaming  │  *  │    fair      │     light      │ gaming / low-power *(light)*  │
    │ studio  │ *** │    good      │    strong      │ podcast / VO *(strong)*       │
    │ rnnoise │ ****│     n/a      │   excellent    │ noisy rooms *(noise-only)*    │
    └─────────┴─────┴──────────────┴────────────────┴───────────────────────────────┘

Files it writes
  PipeWire   →  ${PW_CONF_FILE}  
  PulseAudio →  loads module in memory (index cached in ${PA_IDX_FILE})

Disable / watch loops
  `$ ec-toggle disable` removes those files/modules again.  
  `$ ec-toggle watch` keeps them alive after hot-plug or backend restarts.

Run "ec-toggle list" to see exact device names you can pass to --source / --sink.
EOF
  exit 0
}

# ── argument vars ────────────────────────────────────────────────────────────

SUBCMD=""
SINK_OVERRIDE="" SOURCE_OVERRIDE=""
LATENCY="$DEFAULT_LATENCY" PRESET="$DEFAULT_PRESET"
DRY_RUN="" JSON_OUT="" FORCE=""

# ---------------------------------------------------------------------------
# When sourced by the unit test‑suite we still need all function definitions,
# but we *don't* want to interpret any of the unexpected arguments that Bats
# passes.  Therefore we simply clear "$@" and let the rest of the script load.
# Command‑dispatch is still skipped later by the guard just above it.
# ---------------------------------------------------------------------------
if [[ -n "${EC_TOGGLE_LIB_ONLY:-}" ]]; then
  set --                       # empty the positional parameters
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    on|enable)          SUBCMD="enable" ; shift ;;
    off|disable)        SUBCMD="disable"; shift ;;
    status)             SUBCMD="status" ; shift ;;
    list)               SUBCMD="list"   ; shift ;;
    watch)              SUBCMD="watch"  ; shift ;;

    --generate-systemd-unit) SUBCMD="genunit"; shift ;;
    -s|--sink)     SINK_OVERRIDE="$2";   shift 2 ;;
    -m|--source)   SOURCE_OVERRIDE="$2"; shift 2 ;;
    -l|--latency)  LATENCY="$2";         shift 2 ;;
    -p|--preset)   PRESET="$2";          shift 2 ;;
    -d|--dry-run)  DRY_RUN=1;            shift ;;
    -j|--json)     JSON_OUT=1;           shift ;;
        --force)   FORCE=1;              shift ;;
        --version) show_version ;;
    -h|--help)     usage ;;
    *) die "Unknown option: $1" ;;
  esac
done
SUBCMD="${SUBCMD:-status}"

###############################################################################
# INSTANCE LOCK & TEMP FILE
###############################################################################
[[ "$EUID" -eq 0 ]] && die "Do not run as root."
[[ -w "$XDG_RUNTIME_DIR" ]] || die "XDG_RUNTIME_DIR '$XDG_RUNTIME_DIR' not writable."

exec 9>"$LOCK_FILE" || die "Cannot open lock file."
flock -n 9 || die "Another ec-toggle instance is running."

TMP_FILE="$(mktemp -p "$XDG_RUNTIME_DIR" ec-toggle.tmp.XXXXXX)"
trap '[[ -f "$TMP_FILE" ]] && rm -f "$TMP_FILE"' EXIT

###############################################################################
# BACKEND DETECTION
###############################################################################
is_pipewire()   { command -v wpctl >/dev/null 2>&1 || pw-cli info 0 &>/dev/null; }
is_pulseaudio() { command -v pactl >/dev/null 2>&1; }

if is_pipewire; then BACKEND="pipewire"
elif is_pulseaudio; then BACKEND="pulseaudio"
else die "Neither PipeWire nor PulseAudio detected."; fi
log debug "Backend: $BACKEND | Config schema $CONFIG_VERSION"

###############################################################################
# DEFAULT DEVICE RESOLUTION
###############################################################################
pw_get_default_sink()   { wpctl inspect @DEFAULT_AUDIO_SINK@   | awk -F'"' '/node\.name/ {print $2; exit}'; }
pw_get_default_source() { wpctl inspect @DEFAULT_AUDIO_SOURCE@ | awk -F'"' '/node\.name/ {print $2; exit}'; }

pa_get_default_sink()   { pactl info | awk -F': ' '/Default Sink:/{print $2}'; }
pa_get_default_source() { pactl info | awk -F': ' '/Default Source:/{print $2}'; }

###############################################################################
# PIPEWIRE IMPLEMENTATION
###############################################################################
pw_key() {
  local ver; ver=$(pipewire --version 2>/dev/null | awk '{print $NF}')
  [[ "$ver" =~ ^0\.3\.9[3-9] || "$ver" =~ ^0\.4\. ]] \
      && echo "aec.library.name" || echo "library.name"
}
pw_make_conf() {
  local key latency_line preset_line sink_master source_master
  key="$(pw_key)"
  sink_master="${SINK_OVERRIDE:-$(pw_get_default_sink)}"
  source_master="${SOURCE_OVERRIDE:-$(pw_get_default_source)}"
  [[ -z "$sink_master" || -z "$source_master" ]] \
      && die "Unable to detect default sink/source; specify --sink / --source."

  latency_line="node.latency = ${LATENCY}"
  case "$PRESET" in
    gaming)  preset_line='aec.args = "noise_suppress=low"';;
    studio)  preset_line='aec.args = "noise_suppress=low voice_detection=true"';;
    rnnoise) preset_line='aec.method = rnnoise';;
    *)       preset_line='';;
  esac

  mkdir -p "$PW_CONF_DIR"
  cat >"$TMP_FILE" <<CONF
# Auto-generated by ec-toggle $VERSION
context.modules = [
  { name = libpipewire-module-echo-cancel
    args = {
      ${key}       = ${DEFAULT_AEC_LIB}
      sink_master  = "${sink_master}"
      source_master= "${source_master}"
      capture.props = { node.name = "EchoCancelled Mic" }
      source.props  = { node.name = "EchoCancelled Mic" }
      sink.props    = { node.name = "EchoCancelled Sink" }
      playback.props= { node.name = "EchoCancelled Playback" }
      ${latency_line}
      ${preset_line}
    }
  }
]
CONF
}

pw_reload() {
  command -v systemctl &>/dev/null && {
    systemctl --user restart pipewire.service wireplumber.service
    for i in {1..10}; do wpctl status &>/dev/null && return 0; sleep 1; done
    return 1
  }
  sleep 2; wpctl status &>/dev/null
}

pw_enable() {
  [[ -f "$PW_CONF_FILE" && -z "$FORCE" ]] && die "Already enabled."
  pw_make_conf
  [[ -n "$DRY_RUN" ]] && { log info "(dry-run) would install PipeWire conf"; return; }
  mv "$TMP_FILE" "$PW_CONF_FILE"
  command -v restorecon &>/dev/null && restorecon -F "$PW_CONF_FILE" || true
  pw_reload || { rm -f "$PW_CONF_FILE"; die "PipeWire restart failed - rolled back."; }
  wpctl set-default "EchoCancelled Mic" || true
}

pw_disable() {
  [[ -f "$PW_CONF_FILE" ]] || { log info "Already disabled."; return; }
  [[ -n "$DRY_RUN" ]] && { log info "(dry-run) would remove $PW_CONF_FILE"; return; }
  rm -f "$PW_CONF_FILE"
  [[ -d "$PW_CONF_DIR" && -z "$(ls -A "$PW_CONF_DIR")" ]] && rmdir "$PW_CONF_DIR"
  pw_reload
}

pw_status() {
  local active; wpctl status | grep -q "EchoCancelled Mic" && active=true || active=false
  [[ -n "$JSON_OUT" ]] \
    && printf '{"version":"%s","backend":"pipewire","active":%s}\n' "$VERSION" "$active" \
    || log info "PipeWire echo cancellation active: $active"
}

pw_list() { wpctl status; }

###############################################################################
# PULSEAUDIO IMPLEMENTATION
###############################################################################
pa_enable() {
  need pactl
  [[ -f "$PA_IDX_FILE" && -z "$FORCE" ]] && die "Already enabled."
  local sink_master source_master idx
  sink_master="${SINK_OVERRIDE:-$(pa_get_default_sink)}"
  source_master="${SOURCE_OVERRIDE:-$(pa_get_default_source)}"
  [[ -z "$sink_master" || -z "$source_master" ]] \
      && die "Unable to detect default sink/source; specify --sink / --source."

  [[ -n "$DRY_RUN" ]] && {
    log info "(dry-run) would load module-echo-cancel with masters '$source_master' / '$sink_master'"
    return
  }

  idx=$(pactl load-module module-echo-cancel \
        source_name=ec_source sink_name=ec_sink \
        source_master="$source_master" sink_master="$sink_master" \
        aec_method=webrtc aec_args=voice_p=1)
  echo "$idx" > "$PA_IDX_FILE"

  log info "🚚 Moving existing streams to virtual devices…"
  while read -r id _; do pactl move-sink-input "$id" ec_sink; done < <(pactl list short sink-inputs)
  while read -r id _; do pactl move-source-output "$id" ec_source; done < <(pactl list short source-outputs)

  pactl set-default-source ec_source
}

pa_disable() {
  [[ -f "$PA_IDX_FILE" ]] || { log info "Already disabled."; return; }
  [[ -n "$DRY_RUN" ]] && { log info "(dry-run) would unload module"; return; }
  local idx; idx=$(cat "$PA_IDX_FILE") && rm -f "$PA_IDX_FILE"
  pactl unload-module "$idx" 2>/dev/null || true
}

pa_status() {
  local active; pactl list short modules | grep -q module-echo-cancel && active=true || active=false
  [[ -n "$JSON_OUT" ]] \
    && printf '{"version":"%s","backend":"pulseaudio","active":%s}\n' "$VERSION" "$active" \
    || log info "PulseAudio echo cancellation active: $active"
}
pa_list() { pactl info; pactl list short sources; }

###############################################################################
# SYSTEMD UNIT GENERATOR
###############################################################################
gen_unit() {
  local exe; exe=$(command -v ec-toggle)
  cat <<UNIT
[Unit]
Description=ec-toggle Watch Daemon
After=pipewire.service

[Service]
ExecStart=${exe} watch
Restart=always
RestartSec=10

[Install]
WantedBy=default.target
UNIT
  exit 0
}


###############################################################################
# COMMAND DISPATCH
###############################################################################
case "$SUBCMD" in
  enable)   [[ "$BACKEND" = pipewire ]] && pw_enable   || pa_enable ;;
  disable)  [[ "$BACKEND" = pipewire ]] && pw_disable  || pa_disable ;;
  status)   [[ "$BACKEND" = pipewire ]] && pw_status   || pa_status ;;
  list)     [[ "$BACKEND" = pipewire ]] && pw_list     || pa_list ;;
  genunit)  gen_unit ;;
  watch)
    while true; do
      ([[ "$BACKEND" = pipewire ]] && pw_status | grep -q true) \
        || ([[ "$BACKEND" = pulseaudio ]] && pa_status | grep -q true) \
        || { log warn "Not active - re-enabling…"; [[ "$BACKEND" = pipewire ]] && pw_enable || pa_enable; }
      sleep 30
    done ;;
  *) usage ;;
esac
